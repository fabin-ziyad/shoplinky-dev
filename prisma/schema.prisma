// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  user_id           Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  user_id      Int
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                Int          @id @default(autoincrement())
  name              String
  email             String       @unique
  username          String       @unique
  role              Roles
  profile_picture   String?
  bio               String?
  country           String?
  city              String?
  gender            Gender?
  currency          String?
  is_email_verified Boolean      @default(false)
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  deleted_at        DateTime?
  products          Product[]
  posts             Post[]
  collections       Collection[]
  Account           Account[]
  Session           Session[]
}

model Product {
  id          Int                   @id @default(autoincrement())
  name        String
  slug        String                @unique
  image_url   String
  description String?
  cta_link    String
  price       BigInt
  user_id     Int
  status      ProductStatus
  created_at  DateTime              @default(now())
  updated_at  DateTime              @updatedAt
  deleted_at  DateTime?
  user        User                  @relation(fields: [user_id], references: [id])
  categories  CategoryOnProduct[]
  tags        ProductOnTag[]
  collections ProductOnCollection[]
}

model Category {
  id          Int                 @id @default(autoincrement())
  name        String
  cover_image String?
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  deleted_at  DateTime?
  products    CategoryOnProduct[]
}

model CategoryOnProduct {
  category_id Int
  product_id  Int
  Category    Category? @relation(fields: [category_id], references: [id])
  product     Product?  @relation(fields: [product_id], references: [id])

  @@id([category_id, product_id])
}

model Collection {
  id          Int                   @id @default(autoincrement())
  title       String
  description String?
  user_id     Int
  user        User                  @relation(fields: [user_id], references: [id])
  products    ProductOnCollection[]
}

model ProductOnCollection {
  product_id    Int
  collection_id Int
  product       Product    @relation(fields: [product_id], references: [id])
  collection    Collection @relation(fields: [collection_id], references: [id])

  @@id([product_id, collection_id])
}

model Tag {
  id       Int            @id @default(autoincrement())
  name     String
  products ProductOnTag[]
}

model ProductOnTag {
  tag_id     Int
  product_id Int
  tag        Tag     @relation(fields: [tag_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@id([tag_id, product_id])
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  url         String?
  user_id     Int
  user        User    @relation(fields: [user_id], references: [id])
}

enum Gender {
  male
  female
  others
}

enum Roles {
  admin
  partner
  influencer
  user
}

enum ProductStatus {
  unpublished
  published
  archived
}
